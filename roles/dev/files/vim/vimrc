if empty($MYVIMRC) | let $MYVIMRC = expand('<sfile>:p') | endif

if empty($XDG_CACHE_HOME)  | let $XDG_CACHE_HOME  = $HOME."/.cache"       | endif
if empty($XDG_CONFIG_HOME) | let $XDG_CONFIG_HOME = $HOME."/.config"      | endif
if empty($XDG_DATA_HOME)   | let $XDG_DATA_HOME   = $HOME."/.local/share" | endif
if empty($XDG_STATE_HOME)  | let $XDG_STATE_HOME  = $HOME."/.local/state" | endif

set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

let g:netrw_home = $XDG_DATA_HOME."/vim"
call mkdir($XDG_DATA_HOME."/vim/spell", 'p', 0700)
set viewdir=$XDG_STATE_HOME/vim/view | call mkdir(&viewdir, 'p', 0700)

set backupdir=$XDG_STATE_HOME/vim/backup | call mkdir(&backupdir, 'p', 0700)
set directory=$XDG_STATE_HOME/vim/swap   | call mkdir(&directory, 'p', 0700)
set undodir=$XDG_STATE_HOME/vim/undo     | call mkdir(&undodir,   'p', 0700)
set viminfofile=$XDG_STATE_HOME/vim/viminfo

set nocompatible
set hlsearch
set incsearch
set ignorecase
set smartcase
set number
set ruler
set smarttab
set expandtab
set softtabstop=4
set tabstop=4
set ttyfast                     " Indicate fast terminal conn for faster redraw
set mouse=a
"set ttymouse=xterm2             " Indicate terminal type for mouse codes
"set ttyscroll=3                 " Speedup scrolling
set shiftwidth=4
set autoread                    " Automatically read changed files
set autowrite
set backspace=indent,eol,start  " Makes backspace key more powerful.
set noswapfile
set nobackup
set noerrorbells                " No beeps
set textwidth=80
set autoindent
set encoding=utf8
set ffs=unix,dos
set splitright
set completeopt=menuone,noinsert
set nocursorcolumn              " Do not highlight column (speeds up highlighting)
set nocursorline                " Do not highlight cursor (speeds up highlighting)
set formatoptions+=j
set number

syn on
filetype plugin indent on
colorscheme tender
if !has('gui_running')
    hi Normal ctermbg=NONE
endif
let &t_ut=''
let mapleader=","

" This enables us to undo files even if you exit Vim.
if has('persistent_undo')
  set undofile
  set undodir=~/.local/tmp
endif

" Jump to next error with Ctrl-n and previous error with Ctrl-m. Close the
" quickfix window with <leader>a
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>

set wildignore+=*.beam,.hg,*.pyc,*.o,*.obj
set wildmode=longest,list

nnoremap J mjJ`j
cmap w!! w !sudo tee % >/dev/null

"strip trailing whitespace
inoremap <C-u> <esc>gUiwea
nmap <Leader>p :CtrlP<CR>
nmap <Leader>b :CtrlPBuffer<CR>
nmap <Leader>l <C-w>l
nmap <Leader>h <C-w>h
nmap <Leader>j <C-w>j
nmap <Leader>k <C-w>k
nmap <silent> <Leader>/ :nohl<CR>
nmap <Leader>gd :Gdiffsplit<CR>
nmap <Leader>gb :Git blame<CR>
nmap <Leader>gr :.GBrowse<CR>
vmap <Leader>gr :GBrowse<CR>

imap <C-@>         <C-x><C-o>
imap <C-Space>     <C-x><C-o>
imap <expr> <Tab>  pumvisible() ? "\<C-y>" : "\<Tab>"
imap <expr> <CR>   pumvisible() ? "\<C-y>" : "\<CR>"

let g:ctrlp_match_window = 'order:ttb,max:16'
let g:ctrlp_working_path_mode = 'a'

function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

nnoremap <silent> <leader>W :call Preserve("%s/\\s\\+$//e")<CR>

if(filereadable(expand("~/.vimrc.local")))
    source ~/.vimrc.local
endif
